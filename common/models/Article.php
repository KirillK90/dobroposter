<?php

namespace common\models;

use common\components\helpers\HDev;
use common\components\helpers\HStrings;
use common\enums\ArticleStatus;
use common\enums\ArticleType;
use common\enums\PageType;
use common\enums\SeoParam;
use Yii;
use yii\base\Event;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\image\drivers\Image;
use yii\web\UploadedFile;
use yii\web\UrlManager;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $slug
 * @property integer $author_id
 * @property integer $updater_id
 * @property string $type
 * @property string $status
 * @property string $title
 * @property string $created_at
 * @property string $updated_at
 * @property string $published_at
 * @property string $sub_title
 * @property string $announcement
 * @property string $text
 * @property string $image_src
 * @property string $image_source
 * @property string $image_url
 * @property string $image_description
 * @property boolean $in_top
 * @property boolean $comments_enabled
 * @property boolean $likes_enabled
 * @property boolean $is_primary
 * @property string $meta_title
 * @property string $meta_description
 * @property string $meta_keywords
 * @property string $breadcrumb
 * @property integer $views_count
 *
 * @property CatalogCategory[] $depositCategories
 * @property Bank[] $banks
 * @property User $author
 * @property User $updater
 */
class Article extends \yii\db\ActiveRecord
{

    const BUSY_PAGE_SLUGS = 'logout,signup,login,profile,search,eauth,confirm-email,reset-password,reset-password-request,about,contacts,adv,terms,poisk,cache,ajax,vidy-vkladov,banki,poisk-vkladov,spisok-gorodov,novosti,analitika,gid';

    const SCENARIO_UPLOAD = 'upload';
    const ANNOUNCEMENT_LENGTH = 260;
    const IMAGE_FULL_WIDTH = 870;
    const IMAGE_PREVIEW_WIDTH = 270;
    const IMAGE_PREVIEW_HEIGHT = 154;
    const IMAGE_BIG_PREVIEW_WIDTH = 570;
    const IMAGE_BIG_PREVIEW_HEIGHT = 325;

    /** @var  UploadedFile */
    public $uploadedImage;

    public $bank_ids;
    public $deposit_category_ids;

    public $preview = false;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    public function loadDefaultValues($skipIfSet, $type)
    {
        $this->status = ArticleStatus::DRAFT;
        $this->type = $type;
        if ($this->isArticle()) {
            $this->comments_enabled = $this->likes_enabled = $this->in_top = $this->is_primary = true;
        }
        return parent::loadDefaultValues($skipIfSet); // TODO: Change the autogenerated stub
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'value' => new Expression('NOW()::timestamp(0)'),
            ],
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'author_id',
                'updatedByAttribute' => 'updater_id',
                'value' => function(Event $event) {
                    $user = Yii::$app->get('user', false);
                    return $user && !$user->isGuest ? $user->id : $this->author_id;
                }
            ],
        ];
    }

    public function beforeSave($insert)
    {
        if (!$this->id) {
            $this->generateId();
        }
        if (!$this->slug) {
            $this->generateSlug();
        }
        if (!$this->announcement && $this->isArticle()) {
            $this->generateAnnouncement();
        }

        if ($this->status == ArticleStatus::PUBLISHED && ArrayHelper::getValue($this->oldAttributes, 'status') != ArticleStatus::PUBLISHED) {
            $this->published_at = new Expression('NOW()::timestamp(0)');
        }
        return parent::beforeSave($insert);
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['type', 'status', 'title', 'text'], 'required'],
            [['in_top', 'comments_enabled', 'likes_enabled', 'is_primary'], 'boolean'],
            [['in_top', 'comments_enabled', 'likes_enabled'], 'default', 'value' => true, 'when' => function (Article $model) {
                return $model->isArticle();
            }],
            [['author_id'], 'integer'],
            [['bank_ids', 'deposit_category_ids'], 'each', 'rule' => ['integer']],
            [['created_at', 'updated_at', 'published_at'], 'safe'],
            [['sub_title', 'announcement', 'text', 'image_description', 'meta_description', 'meta_keywords'], 'string'],
            [['slug', 'type', 'status', 'title', 'image_src', 'image_source', 'image_url', 'meta_title', 'breadcrumb'], 'string', 'max' => 255],
            [['slug'], 'match', 'pattern' => '/^[\d\w-]+$/u'],
            [['slug'], 'in', 'not' => true, 'range' => explode(',', self::BUSY_PAGE_SLUGS)],
            [['slug'], 'unique'],
            ['announcement', 'validateMaxLength'],
            ['image_url', 'url'],
            ['uploadedImage', 'required', 'on' => [self::SCENARIO_UPLOAD]],
            ['uploadedImage', 'image', 'extensions' => ['png', 'jpg', 'jpeg', 'gif', 'svg'], 'minWidth' => self::IMAGE_FULL_WIDTH,],
        ];
    }

    public function validateMaxLength()
    {
        if (!$this->isArticle()) return;
        if ($this->announcement && mb_strlen(strip_tags($this->announcement)) > self::ANNOUNCEMENT_LENGTH) {
            $this->addError('announcement', 'Максимальная длина ' . self::ANNOUNCEMENT_LENGTH . ' символов');
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'slug' => 'Алиас',
            'author_id' => 'Автор',
            'updater_id' => 'Последний изменивший',
            'type' => 'Тип',
            'status' => 'Статус',
            'title' => 'Заголовок',
            'created_at' => 'Создана',
            'updated_at' => 'Измененена',
            'published_at' => 'Начало пуб.',
            'sub_title' => 'Подзаголовок',
            'announcement' => 'Анонс',
            'text' => 'Текст',
            'image_src' => 'Загрузить картику',
            'image_source' => 'Источник',
            'image_url' => 'Ссылка',
            'image_description' => 'Описание',
            'in_top' => 'Показывать в блоке лучшие материалы',
            'comments_enabled' => 'Комментарии',
            'likes_enabled' => 'Лайки',
            'is_primary' => 'Сделать главной',
            'bank_ids' => 'Привязка к банкам',
            'deposit_category_ids' => 'Привязка к категориям',
            'meta_title' => 'Meta Title',
            'meta_description' => 'Meta Description',
            'meta_keywords' => 'Meta Keywords',
            'breadcrumb' => 'Breadcrumb',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return [
            'announcement' => 'Макс. '.self::ANNOUNCEMENT_LENGTH.' символов. По умолчанию будет 1-й абзац',
            'meta_title' => 'По умолчанию будет "Заголовок - ' . Yii::$app->name . '"',
            'meta_description' => 'По умолчанию будет анонс',
            'breadcrumb' => 'По умолчанию будет заголовок',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDepositCategory()
    {
        return $this->hasOne(CatalogCategory::className(), ['id' => 'deposit_category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBank()
    {
        return $this->hasOne(Bank::className(), ['id' => 'bank_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id' => 'author_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdater()
    {
        return $this->hasOne(User::className(), ['id' => 'updater_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBanks()
    {
        return $this->hasMany(Bank::className(), ['id' => 'bank_id'])->viaTable('article_banks', ['article_id' => 'id'])->select(['id', 'name', 'name_genitive']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDepositCategories()
    {
        return $this->hasMany(CatalogCategory::className(), ['id' => 'category_id'])->viaTable('article_categories', ['article_id' => 'id'])->select(['id', 'name']);
    }

    private function generateSlug()
    {
        if ($this->type == ArticleType::NEWS) {
            $slug = $this->id . "-" . HStrings::transliterate($this->title);
        } else {
            $slug = HStrings::transliterate($this->title);
            if (self::find()->where(['slug' => $slug])->count()) {
                $i = 1;
                while (self::find()->where(['slug' => $slug . "-$i"])->count()) {
                    $i++;
                }
                $slug .= "-$i";
            }
        }
        $this->slug = $slug;
    }

    /**
     * @return string
     */
    public function getUploadPath()
    {
        return Yii::getAlias('@upload/images/articles');
    }

    /**
     * @return string
     */
    public function getImageSrc($preview = false, $bigPreview = false)
    {
        if ($preview && $this->image_src) {
            $width = $bigPreview ? self::IMAGE_BIG_PREVIEW_WIDTH : self::IMAGE_PREVIEW_WIDTH;
            $height = $bigPreview ? self::IMAGE_BIG_PREVIEW_HEIGHT : self::IMAGE_PREVIEW_HEIGHT;
            $src = substr_replace($this->image_src, '_'.$width.'_'.$height, strrpos($this->image_src, '.'), 0);
            $fullPath = $this->getUploadPath().'/'.$src;
            if (!file_exists($fullPath)) {
                $path = $this->getUploadPath().'/'.$this->image_src;
                if (file_exists($path)) {
                    /** @var Image $image */
                    $image =  Yii::$app->image->load($path);
                    $image->resize($width, $height, Image::PRECISE);
                    $image->save($fullPath);
                } else {
                    Yii::error("$path doesn't exists for article {$this->id}");
                    $src = $this->image_src;
                }
            }
        } else {
            $src = $this->image_src;
        }
        return $src ? Yii::getAlias('@static/images/articles') . '/' . $src : null;
    }

    public function upload()
    {
        if ($this->scenario !== self::SCENARIO_UPLOAD || !$this->validate(['uploadedImage'])) {
            return false;
        }
        $upload = true;
        if ($file = $this->uploadedImage) {
            /** @var Image $image */
            $image = Yii::$app->image->load($file->tempName);
            if ($image->width > self::IMAGE_FULL_WIDTH) {
                $image->resize(self::IMAGE_FULL_WIDTH);
            }

            $upload = $image->save("{$this->getUploadPath()}/{$this->generateFilename($file)}");
        }
        return $upload;
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        if ($runValidation && !$this->validate($attributeNames)) return false;
        \Yii::$app->db->transaction(function () {
            if (!$this->isNewRecord) {
                ArticleBanks::deleteAll(['article_id' => $this->id]);
                ArticleCategories::deleteAll(['article_id' => $this->id]);
            }
            if (!parent::save(false)) {
                HDev::logSaveError($this, true);
            }
            if (isset($this->bank_ids)) {
                foreach ($this->bank_ids as $bank_id) {
                    $model = new ArticleBanks(['article_id' => $this->id, 'bank_id' => $bank_id]);
                    if (!$model->save()) {
                        HDev::logSaveError($model, true);
                    }
                }
            }
            if (isset($this->deposit_category_ids)) {
                foreach ($this->deposit_category_ids as $category_id) {
                    $model = new ArticleCategories(['article_id' => $this->id, 'category_id' => $category_id]);
                    if (!$model->save()) {
                        HDev::logSaveError($model, true);
                    }
                }
            }

        });
        return true;
    }

    /**
     * @param UploadedFile $file
     * @return string
     */
    protected function generateFilename(UploadedFile $file)
    {
        return $this->image_src = time() . '_' . HStrings::cleanFileName($file->name);
    }

    public function published()
    {
        return $this->status == ArticleStatus::PUBLISHED;
    }

    public function isArticle()
    {
        return $this->type != ArticleType::PAGE;
    }

    private function generateAnnouncement()
    {
        $this->announcement = HStrings::getFirstParagraph($this->text, self::ANNOUNCEMENT_LENGTH);
    }

    public function getAdminUrl()
    {
        return ['articles/update/', 'id' => $this->id];
    }

    public function getTypeName()
    {
        return ArticleType::getName($this->type);
    }

    public function getParam($seoParam)
    {
        switch ($seoParam) {
            case SeoParam::META_TITLE:
                return $this->meta_title ?: $this->title . ' - ' . Yii::$app->name;
            case SeoParam::META_DESCRIPTION:
                return $this->meta_description ?: $this->getAnnouncement();
            case SeoParam::META_KEYWORDS:
                return $this->meta_keywords;
            case SeoParam::BREADCRUMB:
                return $this->breadcrumb ?: $this->title;
            default: {
                return null;
            }
        }
    }

    public function getImageSource()
    {
        if ($this->image_source && $this->image_url) {
            return Html::a($this->image_source, $this->image_url, ['target' => '_blank', 'rel' => 'nofollow']);
        } elseif ($this->image_source) {
            return $this->image_source;
        } else {
            return null;
        }
    }

    public function getUpdateLink()
    {
        return Yii::getAlias('@admin/articles/update/') . $this->id;
    }

    public function getUrl($absolute = false)
    {
        return Url::to(["/articles/view", 'type' => $this->type, 'slug' => $this->slug], $absolute);
    }

    public function generateId()
    {
        $this->id = Yii::$app->db->createCommand("select nextval('article_id_seq')")->queryScalar();
        return $this->id;
    }

    public function getBanksList()
    {
        $data = [];
        foreach($this->banks as $bank) {
            $data[] = [
                'id' => $bank->id,
                'mark' => 0,
                'value' => $bank->name,
            ];
        }
        return $data;
    }

    public function getDepositCategoriesList()
    {
        $data = [];
        foreach($this->depositCategories as $category) {
            $data[] = [
                'id' => $category->id,
                'mark' => 0,
                'value' => $category->name,

            ];
        }
        return $data;
    }

    public function getBanksUrls($regionSlug = null)
    {
        $urls = [];
        foreach($this->banks as $bank) {
            $urls[] = Html::a($bank->name, $bank->getUrl($regionSlug));
        }
        return $urls;
    }

    public function getDepositCategoriesUrls($regionSlug = null)
    {
        $urls = [];
        foreach($this->depositCategories as $depositCategory) {
            $urls[] = Html::a(mb_convert_case($depositCategory->name, MB_CASE_TITLE), $depositCategory->getUrl($regionSlug));
        }
        return $urls;
    }

    public function getViewUrl($preview = null)
    {
        /** @var UrlManager $urlManger */
        $urlManger = Yii::$app->urlManagerFrontend;
        return Yii::getAlias('@site').$urlManger->createUrl(['/articles/view', 'slug' => $this->slug, 'type' => $this->type, 'preview' => $preview]);
    }

    public function savePreview()
    {
        if (!$this->validate()) return false;
        $revision = Revision::getPreview($this->id, PageType::ARTICLE);
        $revision->data = json_encode($this->attributes);
        if (!$revision->save()) {
            HDev::logSaveError($revision, true);
        }
        return true;
    }

    public function loadPreview()
    {
        /** @var Revision $revision */
        $revision = Revision::getPreview($this->id, PageType::ARTICLE);
        if ($revision->isNewRecord) {
            return false;
        }
        $this->attributes = $revision->getData();
        $this->preview = true;
        return true;
    }

    public function getAnnouncement()
    {
        return $this->announcement ?: HStrings::getFirstParagraph($this->text);
    }

    public function isDraft()
    {
        return $this->status == ArticleStatus::DRAFT;
    }

}