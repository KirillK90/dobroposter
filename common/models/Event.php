<?php

namespace common\models;

use common\enums\EventStatus;
use common\helpers\HDates;
use common\helpers\HStrings;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\image\drivers\Image;

/**
 * This is the model class for table "event".
 *
 * @property integer $id
 * @property string $created_at
 * @property string $title
 * @property string $slug
 * @property string $type
 * @property integer $place_id
 * @property integer $format_id
 * @property string $announcement
 * @property string $description
 * @property string $start_time
 * @property string $end_time
 * @property string $status
 * @property string $image_src
 * @property string $url
 * @property boolean $free
 * @property integer $price_min
 * @property boolean $in_top
 * @property integer $created_by
 * @property integer $updated_by
 * @property string $updated_at
 * @property string $published_at
 *
 * @property Category[] $categories
 * @property Format $format
 * @property Place $place
 */
class Event extends \yii\db\ActiveRecord
{
    public $author_id;

    const IMAGE_PREVIEW_WIDTH = 350;
    const IMAGE_PREVIEW_HEIGHT = 158;
    const IMAGE_BIG_PREVIEW_WIDTH = 570;
    const IMAGE_BIG_PREVIEW_HEIGHT = 325;

    public $category_ids;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'event';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'value' => function() {
                    $user = Yii::$app->get('user', false);
                    return $user && !$user->isGuest ? $user->id : $this->author_id;
                }
            ],
        ];
    }

    public function transactions()
    {
        return [
            self::SCENARIO_DEFAULT => self::OP_INSERT | self::OP_UPDATE
        ];
    }

    public function loadDefaultValues($skipIfSet = true)
    {
        $this->status = EventStatus::DRAFT;
        return parent::loadDefaultValues($skipIfSet); // TODO: Change the autogenerated stub
    }

    public function loadValues($skipIfSet = true)
    {
        $this->category_ids = array_keys($this->categories);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created_at = HDates::long();
            $this->slug = HStrings::transliterate($this->title);
        } else {
            $this->updated_at = HDates::long();

            if ($this->status == EventStatus::PUBLISHED && ArrayHelper::getValue($this->oldAttributes, 'status') != EventStatus::PUBLISHED) {
                $this->published_at = HDates::long();
            }
        }

        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $currentIds = array_keys($this->categories);

        if ($delIds = array_diff($currentIds, $this->category_ids)) {
            EventCategory::deleteAll(['and',
                ['event_id' => $this->id],
                ['participant_id' => $delIds]
            ]);
        }
        if ($newIds = array_diff($this->category_ids, $currentIds)) {
            $rows = [];
            foreach($newIds as $id) {
                $rows[] = [$this->id, $id];
            }
            $this->getDb()->createCommand()->batchInsert(EventCategory::tableName(), ['event_id', 'category_id'], $rows)->execute();
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'format_id', 'announcement', 'description', 'start_time', 'end_time', 'status', 'slug', 'category_ids'], 'required'],
            [['created_at', 'start_time', 'end_time', 'updated_at', 'published_at'], 'safe'],
            [['place_id', 'price_min', 'created_by', 'updated_by'], 'integer'],
            [['category_ids'], 'each', 'rule' => ['integer']],
            [['description'], 'string'],
            [['title', 'slug'], 'unique'],
            [['free', 'in_top'], 'boolean'],
            [['title', 'slug', 'announcement', 'status', 'image_src', 'url'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'created_at' => 'Добавлено',
            'title' => 'Название',
            'slug' => 'Алиас',
            'type' => 'Тип',
            'format_id' => 'Формат',
            'place_id' => 'Место',
            'announcement' => 'Анонс',
            'category_ids' => 'Категории',
            'description' => 'Описание',
            'start_time' => 'Время начала',
            'end_time' => 'Время окончания',
            'status' => 'Статус',
            'image_src' => 'Картинка',
            'url' => 'Ссылка',
            'free' => 'Бесплатное',
            'price_min' => 'Минимальная цена',
            'in_top' => 'Показывать в Топе',
            'created_by' => 'Автор',
            'updated_by' => 'Редактор',
            'updated_at' => 'Обновлено',
            'published_at' => 'Опубликовано',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategories()
    {
        return $this->hasMany(Category::className(), ['id' => 'category_id'])->viaTable('event_category', ['event_id' => 'id'])->indexBy('id');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFormat()
    {
        return $this->hasOne(Format::className(), ['id' => 'format_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlace()
    {
        return $this->hasOne(Place::className(), ['id' => 'place_id']);
    }

    public function getUpdateUrl()
    {
        return Url::to(['events/update', 'id' => $this->id]);
    }

    /**
     * @param bool $preview
     * @param bool $bigPreview
     * @return string
     * @throws \yii\base\ErrorException
     */
    public function getImageSrc($preview = false, $bigPreview = false)
    {
        $uploadPath = Yii::getAlias('@upload/images/events');
        if ($preview && $this->image_src) {
            $width = $bigPreview ? self::IMAGE_BIG_PREVIEW_WIDTH : self::IMAGE_PREVIEW_WIDTH;
            $height = $bigPreview ? self::IMAGE_BIG_PREVIEW_HEIGHT : self::IMAGE_PREVIEW_HEIGHT;
            $src = substr_replace($this->image_src, '_'.$width.'_'.$height, strrpos($this->image_src, '.'), 0);

            $fullPath = $uploadPath.'/'.$src;
            if (!file_exists($fullPath)) {
                $path = $uploadPath.'/'.$this->image_src;
                if (file_exists($path)) {
                    /** @var Image $image */
                    $image =  Yii::$app->image->load($path);
                    $image->resize($width, $height, Image::PRECISE);
                    $image->save($fullPath);
                } else {
                    Yii::error("$path doesn't exists for article {$this->id}");
                    $src = $this->image_src;
                }
            }
        } else {
            $src = $this->image_src;
        }
        return $src ? Yii::getAlias('@static/images/events') . '/' . $src : null;
    }

    public function getTimePeriod()
    {
        $startTime = new \DateTime($this->start_time);
        $endTime = new \DateTime($this->end_time);
        if ($startTime->format('d H:i') == $endTime->format('d H:i')) {
            return $startTime->format("j F H:i");
        } elseif ($startTime->format('d') == $endTime->format('d')) {
            return $startTime->format("j F")." (".$startTime->format('H:i')." - ".$endTime->format('H:i').")";
        } else {
            return $startTime->format("j F H:i")." - ".$endTime->format('j F H:i');
        }
    }

    public function getCategoriesStr()
    {
        return implode(', ', ArrayHelper::getColumn($this->categories, 'name'));
    }
}
