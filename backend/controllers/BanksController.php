<?php

namespace backend\controllers;

use backend\components\Controller;
use common\enums\UserRole;
use common\models\Bank;
use common\models\BankData;
use common\models\TopBank;
use Yii;
use yii\data\ActiveDataProvider;
use yii\helpers\Json;
use yii\web\NotFoundHttpException;
use yii\web\Response;

/**
 * BanksController implements the CRUD actions for Bank model.
 */
class BanksController extends Controller
{
    public function beforeAction($action)
    {
        if ($this->action->id = 'filter2') {
            $this->allowedRoles[] = UserRole::EDITOR;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionIndex()
    {
        $model = new TopBank();
        $topBanks = Bank::find()->innerJoinWith('top')->orderBy('top_bank.id')->all();
        return $this->render('index', compact('topBanks', 'model'));
    }

    /**
     * Updates an existing Bank model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $bank = $this->findModel($id);
        if (!$model = $bank->bankData) {
            $model = new BankData();
            $model->id = $bank->id;
        }

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            $this->setFlash('success', ACTION_UPDATE_SUCCESS);
        }

        return $this->render('update', [
            'model' => $model,
            'bank' => $bank,
        ]);

    }

    /**
     * Filters list of banks
     * @param $q
     * @return array|\yii\db\ActiveRecord[]
     */
    public function actionFilter($q='')
    {
        $ids = Yii::$app->request->post('ids');
        Yii::$app->response->format=Response::FORMAT_JSON;
        $query = Bank::find()->select(['name', 'id']);
        if ($q) {
            $query->andWhere(['ilike', 'name', $q]);
        }
        if ($ids) {
            $query->andWhere(['id' => $ids]);
        }
        $rawData = $query->orderBy('name')->limit(20)->asArray()->all();
        $data = [];
        foreach ($rawData as $row) {
            $data[] = [
                'id' => $row['id'],
                'name' => $row['name'],
                'selected' => (boolean)$ids
            ];
        }
        return $data;
    }

    /**
     * Filters list of banks
     * @return array|\yii\db\ActiveRecord[]
     */
    public function actionFilter2()
    {
        $request = Yii::$app->request;
        $results = ['data' => [], 'page' => 1, 'total' => 0];
        $query   = $request->post('query');
        $page    = $request->post('page', 1);

        $currentPage = 0;
        if (!empty($page) && is_numeric($page) && $page > 0) {
            $currentPage = $page - 1;
        }

        if (empty($query)) {
            $queryObject = Bank::find();
        }
        else {
            $queryObject = Bank::find()->where(['ilike', 'name', $query]);
        }

        $queryObject->orderBy('bank.name');

        $provider = new ActiveDataProvider([
            'query' => $queryObject,
            'pagination' => [
                'pageSize' => 10,
            ],
        ]);

        $provider->getPagination()->setPage($currentPage);

        foreach ($provider->getModels() as $data) {
            /** @var Bank $data */
            $results['data'][] = [
                'id'    => $data->id,
                'mark'  => 0,
                'value' => $data->name,
            ];
        }

        $results['page']  = $provider->getPagination()->getPage() + 1;
        $results['total'] = $provider->getPagination()->getPageCount();

        return Json::encode($results);
    }

    /**
     * Finds the Bank model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Bank the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Bank::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionSaveTop()
    {
        if (!$topIds = Yii::$app->request->post('top_ids')) {
            $this->renderJSON(false, 'request incorrect');
        }
        $topIds = array_unique($topIds);
        $rows = [];
        foreach($topIds as $key => $topId) {
            $rows[] = [$key + 1, $topId];
        }
        $cnt = TopBank::getDb()->transaction(function($db) use ($rows) {
            TopBank::deleteAll();
            return \Yii::$app->db->createCommand()->batchInsert((new TopBank())->tableName(), ['id', 'bank_id'], $rows)->execute();
        });

        $this->renderJSON(true, "$cnt top cities saved");
    }
}
