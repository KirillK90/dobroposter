<?php
/**
 * Created by PhpStorm.
 * User: mirocow
 * Date: 03.07.15
 * Time: 20:39
 */

namespace frontend\components;

use Yii;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;

/**
 * Class View
 * @package frontend\components
 * @method \common\models\User getIdentity()
 * @property string $regionName  @readonly
 */
class User extends \yii\web\User
{
    /**
     * This method is called after the user is successfully logged in.
     * The default implementation will trigger the [[EVENT_AFTER_LOGIN]] event.
     * If you override this method, make sure you call the parent implementation
     * so that the event is triggered.
     * @param \common\models\User $identity the user identity information
     * @param boolean $cookieBased whether the login is cookie-based
     * @param integer $duration number of seconds that the user can remain in logged-in status.
     * If 0, it means login till the user closes the browser or the session is manually destroyed.
     */
    protected function afterLogin($identity, $cookieBased, $duration, $fromForum=false)
    {
        $identity->touch('last_visit');
        if(!$fromForum && $identity->forum_user_id) {
            $this->forumCookieLogin($identity);
        }
        parent::afterLogin($identity, $cookieBased, $duration); // TODO: Change the autogenerated stub
    }

    //...or by forum_cookie
    protected function loginByCookie()
    {
        if ($forum_id = $this->isLoggedOnForum()) {
            //Если есть форумные куки, используем их
            /** @var IdentityInterface $identity */
            if ($identity = \common\models\User::findIdentityByForumId($forum_id)) {
                if ($this->beforeLogin($identity, true, $this->authTimeout)) {
                    $this->switchIdentity($identity, $this->autoRenewCookie ? $this->authTimeout : 0);
                    $ip = Yii::$app->getRequest()->getUserIP();
                    Yii::info("User '$forum_id' logged in from $ip via forum.", __METHOD__);
                    $this->afterLogin($identity, true, $this->authTimeout, true);
                }
            }
        } else {
            parent::loginByCookie();
        }
    }

    protected function forumCookieLogin(\common\models\User $identity)
    {
        $sessionHash = md5($identity->forum_user_id . microtime(true));
        $useragent = $_SERVER['HTTP_USER_AGENT'];
        $ip = implode('.', array_slice(explode('.', $_SERVER['REMOTE_ADDR']), 0, 4 - 1));
        $idhash = md5($_SERVER['HTTP_USER_AGENT'] . $ip);

        $query = "insert into `session`(`sessionhash`,`userid`,`host`,`idhash`,`lastactivity`,`location`,`useragent`,`loggedin`) values(:sessionhash,:user_id,:host,:idhash,:lastactivity,:location,:useragent,2)";
        /** @var \mysqli_result $result */
        \Yii::$app->forumDb->createCommand($query, [
            ':sessionhash' => $sessionHash,
            ':user_id' => $identity->forum_user_id,
            ':host' => $_SERVER['REMOTE_ADDR'],
            ':idhash' => $idhash,
            ':lastactivity' => time(),
            ':location' => '/',
            ':useragent' => $useragent,
        ])->execute();
        Yii::$app->response->cookies->add(new PlainCookie([
            'name' => 'bbsessionhash',
            'value' => $sessionHash,
            'httpOnly' => true
        ]));
        /**
         * И без этих кук все работает, но в мануале они были
         */
//        Yii::$app->response->cookies->add(new PlainCookie([
//            'name' => 'bbuserid',
//            'value' => $this->getIdentity()->forum_user_id
//        ]));
//        Yii::$app->response->cookies->add(new PlainCookie([
//            'name' => 'bbpassword',
//            'value' => md5($this->getIdentity()->password_hash.Yii::$app->params['forum.cookie_salt'])
//        ]));
    }

    protected function isLoggedOnForum()
    {
        if(ArrayHelper::getValue($_COOKIE,'bbsessionhash')){
            if($s = $this->get_session(ArrayHelper::getValue($_COOKIE,'bbsessionhash'))){
                return $s;
            }
        }
        return false;
    }

    protected function get_cookie($bbuserid, $bbpassword)
    {
        $query = "SELECT * FROM `user` WHERE `userid` = :user_id LIMIT 1";
        /** @var \mysqli_result $result */
        $result = Yii::$app->forumDb->createCommand($query,[':user_id',$bbuserid])->execute();

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $dbpass = $row['password'];

            // vb might change the salt from time to time. can be found in the /includes/functions.php file
            if (md5($dbpass . self::COOKIE_SALT) == $bbpassword) {
                return $bbuserid;
            }
        }
        return false;
    }

    private function get_session($hash)
    {
        $ip = implode('.', array_slice(explode('.', $_SERVER['REMOTE_ADDR']), 0, 4 - 1));
        $newidhash = md5($_SERVER['HTTP_USER_AGENT'] . $ip);

        //Кавычки вокруг
        $query = "SELECT * FROM `session` WHERE `sessionhash` = :hash LIMIT 1";
        /** @var \mysqli_result $result */
        $result = \Yii::$app->forumDb->createCommand($query,[':hash'=>$hash])->queryAll();
        if(count($result) > 0){
            $row = $result[0];
            $idhash = $row['idhash'];
            $userid = $row['userid'];
            return ($idhash == $newidhash) ? $userid : false;
        }
        return false;
    }

    public function afterLogout($identity)
    {
        //Очищаем основную куку форума, разлогинивая юзера
        Yii::$app->response->cookies->add( new PlainCookie([
            'name' => 'bbsessionhash',
            'value' => '',
            'httpOnly'=> true
        ]));
        Yii::$app->response->cookies->add( new PlainCookie([
            'name' => 'bbuserid',
            'value' => '',
            'httpOnly'=> true
        ]));
        Yii::$app->response->cookies->add( new PlainCookie([
            'name' => 'bbpassword',
            'value' => '',
            'httpOnly'=> true
        ]));
        parent::afterLogout($identity);
    }


}